❦Lost Opportunities İn The Libre Software Community❦

By Felipe Lohan Pinheiro da Silva

***

In the LibrePlanet’s article “List of software that does not respect the Free System Distribution Guidelines” (http://web.archive.org/web/*/http://libreplanet.org/wiki/List_of_software_that_does_not_respect_the_Free_System_Distribution_Guidelines), NDISwrapper (http://web.archive.org/web/*/http://ndiswrapper.sourceforge.net/wiki/index.php/Main_Page), a program that allows the use of network drivers for Microsoft Windows w/ the NDIS specification to work in linux, is listed among packages that doesn’t follow the free software guidelines. ¿ The stated reason? That the program is used to load non-free drivers. Free software community should work to create free networking hardware and free Windows drivers under NDIS specification, instead of taking the easiest path by blacklisting NDISwrapper; after all, its source code itself isn’t closed.

In the project GNU’s article “Explaining Why We Don’t Endorse Other Systems” (http://web.archive.org/web/*/http://www.gnu.org/distros/common-distros.en.html), it’s written that they doesn’t endorse the ReactOS (an operating system that aims compatibility w/ programs made for Microsoft Windows - https://web.archive.org/web/*/http://www.reactos.org/). ¿ The stated reason? “Use with proprietary software and drivers meant for Windows is one of the stated goals of the project”. ¡ My fucking ass! Not all of the programs made for Microsoft Windows are proprietary or compiled in proprietary toolchains. Also, that leads to the following qüestion: ¿ So why they endorse distros that have WINE (a program that allow programs made for Microsoft Windows to be run in Linux - https://web.archive.org/web/*/http://www.winehq.org/) in their repositories? ¡ They even have WINE in the fucking GuixSD (the linux distribution from the GNU project itself) itself: https://web.archive.org/web/20210119184755/https://guix.gnu.org/en/packages/W/.

In their article “Free System Distribution Guidelines (GNU FSDG)” (http://web.archive.org/web/*/http://gnu.org/distros/free-system-distribution-guidelines.en.html) in the section “Non-functional Data”, it’s written “(...), we don’t insist on the free license criteria for non-functional data”. That’s a mistake, as I think that a truly free/libre distro should be that way even in the non-functional data that’s distributed inside it.

In FSF’s Article “Respects Your Freedom (RYF) certification requirements” (http://web.archive.org/web/*/http://ryf.fsf.org/about/criteria) in the section “Other misleading endorsements”, it’s written that you can’t put any badges written “Works with Windows” or “Made for Mac”, because, according to them, “(...) these would give an appearance of legitimacy to those proprietary packages, and may make users think the product requires them”. ¡ My fucking ass! There should be no problem in doing that, as long as the schematics and source code of your product remained free/libre, and compiled in a free/libre toolchain.

However, in the same article, in the section “100% free software”, they make an exemption to software running in secondary embedded processors to be free. I think that it’s a mistake from them, as all software should be free/libre. No exemptions, no exceptions.

Libre software community made no effort to create a compatibility layer to make applications for the devices of the Apple/Macintosh platform (iPad (tablet), iPhone (cell/mobile phone), iMac/MacBook/Mac Mini (computing – Desktop & notebook)) to run in GNU/Linux/Unix-like machines, like the Wine project made about the Microsoft Windows applications (http://web.archive.org/web/20190705194009/https://www.winehq.org/). Now there’s a project called darling that tries to do it to the Apple/Macintosh platform, but no one besides very few people seems to paying much attention to it to it (http://web.archive.org/web/20190705194139/https://www.darlinghq.org/). Some years ago, the İmac platform shifted from the PowerPC to the X86-64 bits architecture. This caused a compatibility issue, as not all of the old apps were recompiled to the new platform. Creating a compatibility layer to run programs designed for PowerPC Apple devices in GNU/Linux/Unix-like machines could be also an opportunity to the Libre software community, but the community didn’t explored this opportunity. The community of Apple fans is sizeable and most of its members have mid-to-high acquisitive power, so developing such kind of Libre software could open doors to the Libre software community. The Libre software community also didn’t developed Wine-Like software to run Android apps (usually compiled to the ARM architecture) in GNU/Linux/Unix-like machines, what could open doors w/ the community of android fans. There are such programs now but, to date, most of the FSF-endorsed distros didn’t included it in their repos. Also, the community didn’t created such a compatibility-layer to run the OS/2 operating system programs, as the operating system was orphaned by the İBM (today, it appears that there are derivatives systems under the names “ArcaOs” (http://arcanoae.com/arcaos/) and “eComStation” (http://ecomstation.com/index.phtml)). The same can be said about the home computers & operating systems from the 80s on that had a sizable share of users.

İn the pre-HTML5 era, when the Flash (proprietary multimedia platform created by the Adobe company) ruled as absolute, the libre software community started to create some free software projects to decode Flash ƒіles, but they disbanded from these projects, for Hell knows what reason and to Hell knows to where. The community just sat and waited for Steve ᴊ̇obs, the knight of the proprietary Apple platform, kill the Flash dragon.

İn the dark days of the X86-64 bits instruction set (as of today, İ think that we still living these dark days), the Libre software community didn’t joined the Libre hardware community to create a viable Libre alternative instruction set, at least to be produced by and used for the members of the Libre software & Hardware communities. Now that the Apple announced its migration to the ARM architecture in the desktop computing, the Libre software community, as it’s expected, will sit w/ the fucking arms crossed and wait for the proprietary Apple knights to kill the X86 dragon, as it did w/ the Flash.

Apple (despite its proprietary approach) is like the Saint George Of The Cappadocia: kills dragons. While the Libre software community is just like the guy that sits on a rock, crosses the fucking arms and just watch.

When the proprietary RPG Maker (currently from the Kadokawa corporation – カドカワ and Degica – デジカ) ruled as absolute as the engine to create amateurs RPGs, the free software community could make a joint effort to create a libre-licensed software to read their ƒіles, being compatible w/ their engine, but they didn’t it. Libre software community didn’t understood that bringing amateur game developers to their side would open doors to them.

In the period between the end of 2020 to the beginning of 2021, the Adobe company decided to stop supporting and deactivate the Flash Player plugin. The Libre software community could use this opportunity to create (or improve the ones already existing, or rectivate their development) libre-sourced software replacements to play flash contents; in other words, embracing the [widows/orphans] of the Flash Player platform. Needless to say that it's almost certain that they will not do it. Later they will say some html5-related bullshit as the excuse.

Creating Libre software projects to decode previously proprietary formats (like .indd Adobe İnDesign ƒіles – Desktop publishing and .dwg Autodesk AutoCAD – CAD – Computer-Aided Design) by doing reverse engineering in the ƒіles themselves (instead of in the binary code of the program themselves) would kill two rabbits w/ a single quarterstaff blow: the format would be turned into an open one by the libre software community and it could attract the attention of some of the users of these proprietary programs. And also reverse engineering .rar (from RARLAB – Compressing ƒіles) ƒіles, to discover its encoding algorithm; keep in mind that this İSN’T illegal; what’s illegal is reverse engineer the decompression program source code to discover its compression algorithm, as there’s a clause in the decompression program license that prohibits it; that’s an example of software that’s open, but not libre; in the article 10 of their license (http://web.archive.org/web/20190722155048/https://www.rarlab.com/license.htm) and the article 2 of the Unrar license is written “(...) RAR compression algorithm, which is proprietary, (...)” – bullshit, algorithms can’t be proprietary, only the source code of programs that implement them can be.

Also, the relationship between video/graphic cards processing unities ([V/G]PUs) manufacturers and the libre software community is very diƒƒіcult; so the libre software community could join the free hardware community to create a free speciƒіcation for a [V/G]PU, but the few projects like this never became strong in the community.

The development of the GNU Hurd, the kernel made w/ the GNU Mach microkernel (an implementation of the Mach kernel created in the Carnegie Mellon University), is so ridiculous that it became an internal joke in the programming community; the joke would be more humilliating if the subject were more known by the programmers. The project was founded BEFORE the creation of the Linux kernel, ¡ and it still doesn’t have a usable version to the general public!

Also, there’s the Replicant project (http://replicant.us/), an FSF endorsed project (http://gnu.org/distros/free-non-gnu-distros.en.html) to an Android-compatible operating system. They could use the libre-licensed elements of the Android-x86 project (http://android-x86.org/) to create a x86-64 variant of the Replicant, but they never did it; it could bring raise people’s interest in the project and bring them to it. However, when an user requested its creation and the answer was: “We frankly don’t have time to spend on аn x86 version of Replicant. (...).” (http://web.archive.org/web/*/https://redmine.replicant.us/issues/453).

The GNU Project used to have a package called Libreboot (that deals w/ the firmware of computers), whose main developer was Leah Rowe. She unilaterally removed the package from the GNU project, under allegations that the FSF fired a trans[exual/gender] employee just because she complained about suffering prejudice at her working environment; claims that were denied by the FSF's board. The GNU project's stance could very well be of providing a replacement, by forking the Libreboot codebase (being an libre software project, they could have the right to do so, w/ the proper attribution, of course) and rebranding its version of it (in order to avoid any trademark considerations); but they never did it. Instead, its stance was to passivelly accept the removal of the package from their project, w/out any fork to replace it.

Richard Stallman also committed the mistake of not recognizing the due importance of the free/libre hardware movement in its inception. This was even acknowledged in the article “Stallman’s One Mistake”, (by Brian Benchoff – http://web.archive.org/web/20200717082947*/https://hackaday.com/2016/01/13/stallmans-one-mistake/). Stallman wrote in his article “On Free Hardware” (1999 – http://web.archive.org/web/*/https://www.linuxtoday.com/infrastructure/1999062200505NWLF): “Because copying hardware is so hard, the question of whether we're allowed to do it is not vitally important. I see no social imperative for free hardware designs like the imperative for free software. Freedom to copy software is an important right because it is easy now – any computer user can do it. Freedom to copy hardware is not as important, because copying hardware is hard to do. Present-day chip and board fabrication technology resembles the printing press. Copying hardware is as difficult as copying books was in the age of the printing press, or more so. So the ethical issue of copying hardware is more like the ethical issue of copying books 50 years ago, than like the issue of copying software today.”. Let me say something: free/libre software means nothing if you’re running it atop of non-free/libre firmware/BIOS/UEFI, and having a free/libre firmware/BIOS/UEFI means nothing if you are transmitting data over a network, servers & datacenters that doesn’t respect the freedom & privacy of the users.

Stallman also committed other mistake: not recognizing the due importance of the DOS system at their inception. In the GNU’s Bulletin – Volume 01 – Number 01 (1986 – February – http://web.archive.org/web/*/http://www.gnu.org/bulletins/bull1.txt), Stallman wrote: “Why not imitate MSDOS or CPM?  They are more widely used, true, but they are also very weak systems, designed for tiny machines.”. The free/libre software community have a lot of command shells running in GNU/Linux environments (Bash, Zshell, Tcsh, Fish), but the community never implemented a native CMD-like shell, to allow Batch scripts (the ones used in DOS/Windows systems) to run natively, waht could attract DOS users; if you want to run a Batch script in a GNU/Linux environment, you need to rely in options like WINE or DOSBox, for example.

However, there’s a VERY important thing that FSF (and GNU) did right: they refused to accept closed-source firmware (like proprietary drivers, they’re also called “binary blobs” by FSF and GNU), even when they are meant to run in peripherals; BSD community, on the other hand, committed the mistake of accepting them (BSD community calls only the close source drivers as “binary blobs”). FSF/GNU is right in doing it, as you don’t know what kind of malwares/spywares/backdoors/bugs are included in these binary blobs. So this new parallel free/libre software & hardware community should have the same stance as the GNU/FSF one in this matter.

Bottom line, I think that the free/libre software community suffers from a chronic problem of weak leaderships.
